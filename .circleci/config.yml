version: 2.1
executors:
  node-executor:
    docker:
      - image: cimg/node:22.11.0
jobs:
  namespace-deployment:
    executor: node-executor
    parameters:
      api-url:
        type: string
        default: 'http://195.137.244.62:3005/'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-
      - run: npm install
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: sudo apt-get update -y && sudo apt-get install -y jq curl
      - run:
          name: Validate Environment Variables
          command: |
            for var in JWT_SECRET IPFS_KEY_NAME; do
              if [ -z "${!var}" ]; then
                echo "Error: $var is not set!" && exit 1
              fi
            done
            echo "All required environment variables are set."
      - run:
          name: Validate API Connection
          command: |
            if ! curl -I "<<parameters.api-url>>unique-namespace"; then
              echo "Error: API at <<parameters.api-url>> is unreachable!" && exit 1
            fi
            echo "API is reachable."
      - run: mkdir -p logs
      - run: npm run build
      - run: node generateCarBlob.js
      - run:
          name: Import CAR File (DAG Import)
          command: |
            car_file=$(find car_files -type f -name "*.car")
            if [ -z "$car_file" ]; then
              echo "CAR file not found!" && exit 1
            fi

            http_code=$(curl -s -o body.txt -w "%{http_code}" -X POST \
            "<<parameters.api-url>>api/v0/dag/import?pin-roots=true" \
              -H "Authorization: Bearer $JWT_SECRET" \
              -F "file=@${car_file}")

            body=$(cat body.txt | jq)

            echo "$body" >> logs/dag_import.log

            if [ "$http_code" -ne 200 ]; then
              echo "Import failed. HTTP $http_code: $body" && exit 1
            fi

            echo "CAR file imported: $body"
      - run:
          name: Fetch DAG Get
          command: |
            root_cid=$(jq -r '.Root.Cid["/"]' logs/dag_import.log)
            if [ -z "$root_cid" ]; then
              echo "Root CID not found!" && exit 1
            fi

            http_code=$(curl -s -o body.txt -w "%{http_code}" -X POST \
            "<<parameters.api-url>>api/v0/dag/get?arg=$root_cid" \
              -H "Authorization: Bearer $JWT_SECRET" \
              -H "Content-Type: application/json")

            body=$(cat body.txt | jq)

            echo "$body" >> logs/dag_get.log

            if [ "$http_code" -ne 200 ]; then
              echo "DAG fetch failed. HTTP $http_code: $body" && exit 1
            fi

            echo "DAG fetched: $body"
      - run:
          name: Publish Name with Root CID
          command: |
            root_cid=$(jq -r '.Root.Cid["/"]' logs/dag_import.log)

            if [ -z "$root_cid" ]; then
              echo "Missing CID!" && exit 1
            fi

            http_code=$(curl -s -o body.txt -w "%{http_code}" -X POST \
            "<<parameters.api-url>>api/v0/name/publish?key=$IPFS_KEY_NAME&arg=/ipfs/${root_cid}&ttl=10s" \
              -H "Authorization: Bearer $JWT_SECRET" \
              -H "Content-Type: application/json")

            body=$(cat body.txt | jq)

            echo "$body" >> logs/name_publish.log

            if [ "$http_code" -ne 200 ]; then
              echo "Publish failed. HTTP $http_code: $body" && exit 1
            fi

            echo "Name published: $body"
      - store_artifacts:
          path: logs/
          destination: all-logs
workflows:
  main-workflow:
    jobs:
      - namespace-deployment
