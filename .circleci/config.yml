version: 2.1

executors:
  docker-executor:
    docker:
      - image: ghcr.io/foundry-rs/foundry:latest

jobs:
  mint-contract:
    executor: docker-executor
    parameters:
      contract-address:
        type: string
        default: "0xe1C296cb79E050EB2A52b24D9Be91f8599B32011"
      rpc-url:
        type: string
        default: "wss://optimism-sepolia-rpc.publicnode.com"
      api-url:
        type: string
        default: "http://45.146.7.38:3005/"
    steps:
      - checkout
      - run:
          name: "Install jq"
          command: apt-get update -y && apt-get install -y jq
      - run:
          name: "Install curl"
          command: apt-get update -y && apt-get install -y curl
      - run:
          name: "Validate Environment Variables"
          command: |
            if [ -z "$JWT_SECRET" ]; then
              echo "Error: JWT_SECRET is not set!" && exit 1
            fi
            if [ -z "$NAMESPACE" ]; then
              echo "Error: NAMESPACE is not set!" && exit 1
            fi
            echo "Environment variables are set correctly."
      - run:
          name: "Check API Connectivity"
          command: |
            if ! curl -I "<<parameters.api-url>>unique-namespace"; then
              echo "Error: API at <<parameters.api-url>> is unreachable!" && exit 1
            fi
            echo "API endpoint is reachable."
      - run:
          name: "Check Unique Namespace"
          command: |
            mkdir -p logs
            response=$(curl -s -w "%{http_code}" -X POST "<<parameters.api-url>>unique-namespace" \
              -H "Authorization: Bearer $JWT_SECRET" \
              -H "Content-Type: application/json" \
              -d '{"namespace":"'"$NAMESPACE"'"}')
            http_code=$(tail -n1 \<<< "$response")
            body=$(head -n-1 \<<< "$response")
            
            echo "$body" >> logs/check_unique_namespace.log
            
            if [ "$http_code" -ne 200 ]; then
              echo "Error: HTTP status $http_code while checking namespace uniqueness. Response: $body"
              exit 1
            fi

            is_unique=$(echo $body | jq -r '.unique')
            if [ "$is_unique" != "true" ]; then
              echo "Error: Namespace is not unique. Response: $body"
              exit 1
            fi
            echo "Namespace is unique. Response: $body"
      - run:
          name: "Check Unique Generated Key"
          command: |
            response=$(curl -s -w "%{http_code}" -X POST "<<parameters.api-url>>unique-generated-key" \
              -H "Authorization: Bearer $JWT_SECRET" \
              -H "Content-Type: application/json" \
              -d '{"key":"'"$NAMESPACE"'"}')
            http_code=$(tail -n1 \<<< "$response")
            body=$(head -n-1 \<<< "$response")
            
            echo "$body" >> logs/check_unique_generated_key.log
            
            if [ "$http_code" -ne 200 ]; then
              echo "Error: HTTP status $http_code while checking generated key uniqueness. Response: $body"
              exit 1
            fi

            is_unique=$(echo $body | jq -r '.unique')
            if [ "$is_unique" != "true" ]; then
              echo "Error: Generated key is not unique. Response: $body"
              exit 1
            fi
            echo "Generated key is unique. Response: $body"
      - run:
          name: "Mint Namespace Token and Save Logs"
          command: |
            mkdir -p logs
            cast send <<parameters.contract-address>> "safeMint(string)" "$NAMESPACE" \
              --rpc-url <<parameters.rpc-url>> \
              --private-key "$PRIVATE_KEY" | tee logs/mint_result.log
      - run:
          name: "Parse and Check Mint Result"
          command: |
            if grep -q "Transaction successful" logs/mint_result.log; then
              echo "Minting succeeded!"
            else
              echo "Minting failed. Check logs/mint_result.log for details." && exit 1
            fi
      - store_artifacts:
          path: logs/check_unique_namespace.log
          destination: unique-namespace-log

      - store_artifacts:
          path: logs/check_unique_generated_key.log
          destination: unique-generated-key-log

      - store_artifacts:
          path: logs/mint_result.log
          destination: mint-result-log

workflows:
  main-workflow:
    jobs:
      - mint-contract
