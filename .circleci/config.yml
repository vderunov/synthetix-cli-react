version: 2.1

executors:
  docker-executor:
    docker:
      - image: ghcr.io/foundry-rs/foundry:latest

jobs:
  mint-contract:
    executor: docker-executor
    parameters:
      private-key:
        type: env_var_name
        default: PRIVATE_KEY
      contract-address:
        type: env_var_name
        default: CONTRACT_ADDRESS
      rpc-url:
        type: env_var_name
        default: RPC_URL
      namespace:
        type: env_var_name
        default: NAMESPACE
      api-url:
        type: env_var_name
        default: API_URL_LOCAL
      jwt-secret:
        type: env_var_name
        default: JWT_SECRET
    steps:
      - checkout
      - run:
          name: "Install jq"
          command: apt-get update -y && apt-get install -y jq
      - run:
          name: "Install curl"
          command: apt-get update -y && apt-get install -y curl
      - run:
          name: "Check Unique Namespace"
          command: |
            mkdir -p logs
            response=$(curl -s -w "%{http_code}" -X POST "<<parameters.api-url>>/unique-namespace" \
              -H "Authorization: Bearer <<parameters.jwt-secret>>" \
              -H "Content-Type: application/json" \
              -d '{"namespace":"'"<<parameters.namespace>>"'}')
            http_code=$(tail -n1 \<<< "$response")
            body=$(head -n-1 \<<< "$response")
            
            echo "$body" >> logs/check_unique_namespace.log
            
            if [ "$http_code" -ne 200 ]; then
              echo "Error: HTTP status $http_code while checking namespace uniqueness. Response: $body"
              exit 1
            fi

            is_unique=$(echo $body | jq -r '.unique')
            if [ "$is_unique" != "true" ]; then
              echo "Error: Namespace is not unique. Response: $body"
              exit 1
            fi
            echo "Namespace is unique. Response: $body"
      - run:
          name: "Check Unique Generated Key"
          command: |
            mkdir -p logs
            response=$(curl -s -w "%{http_code}" -X POST "<<parameters.api-url>>/unique-generated-key" \
              -H "Authorization: Bearer <<parameters.jwt-secret>>" \
              -H "Content-Type: application/json" \
              -d '{"key":"'"<<parameters.namespace>>"'}')
            http_code=$(tail -n1 \<<< "$response")
            body=$(head -n-1 \<<< "$response")
            
            echo "$body" >> logs/check_unique_generated_key.log
            
            if [ "$http_code" -ne 200 ]; then
              echo "Error: HTTP status $http_code while checking generated key uniqueness. Response: $body"
              exit 1
            fi

            is_unique=$(echo $body | jq -r '.unique')
            if [ "$is_unique" != "true" ]; then
              echo "Error: Generated key is not unique. Response: $body"
              exit 1
            fi
            echo "Generated key is unique. Response: $body"
      - run:
          name: "Mint Namespace Token and Save Logs"
          command: |
            mkdir -p logs
            cast send <<parameters.contract-address>> "safeMint(string)" <<parameters.namespace>> \
              --rpc-url <<parameters.rpc-url>> \
              --private-key <<parameters.private-key>> | tee logs/mint_result.log
      - run:
          name: "Parse and Check Mint Result"
          command: |
            if grep -q "Transaction successful" logs/mint_result.log; then
              echo "Minting succeeded!"
            else
              echo "Minting failed. Check logs/mint_result.log for details." && exit 1
            fi
      - store_artifacts:
          path: logs
          destination: minting_logs

workflows:
  main-workflow:
    jobs:
      - mint-contract
